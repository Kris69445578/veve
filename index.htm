<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Loading - HACKSVIBEZ_DERIV</title>
  <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&family=Montserrat:wght@300;400;600&display=swap" rel="stylesheet">
  <style>
    :root {
      --primary: #00f0ff;
      --secondary: #0062ff;
      --dark: #0a0a1a;
      --light: #e0e0ff;
      --accent: #ff00aa;
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    
    body, html {
      margin: 0;
      padding: 0;
      height: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      background-color: var(--dark);
      color: var(--light);
      font-family: 'Montserrat', sans-serif;
      overflow: hidden;
      position: relative;
    }
    
    .particles {
      position: absolute;
      width: 100%;
      height: 100%;
      z-index: 0;
    }
    
    .particle {
      position: absolute;
      background-color: rgba(0, 200, 255, 0.5);
      border-radius: 50%;
      pointer-events: none;
    }
    
    .loading-container {
      text-align: center;
      z-index: 10;
      max-width: 800px;
      padding: 2rem;
      background: rgba(10, 10, 26, 0.8);
      border-radius: 15px;
      box-shadow: 0 0 30px rgba(0, 200, 255, 0.3);
      backdrop-filter: blur(5px);
      border: 1px solid rgba(0, 200, 255, 0.2);
      transform: perspective(1000px) rotateX(0deg);
      transition: transform 0.5s ease;
      animation: float 6s ease-in-out infinite;
    }
    
    @keyframes float {
      0%, 100% { transform: translateY(0) perspective(1000px) rotateX(0deg); }
      50% { transform: translateY(-20px) perspective(1000px) rotateX(5deg); }
    }
    
    .loading-container h1 {
      font-size: 3rem;
      margin-bottom: 1rem;
      font-family: 'Orbitron', sans-serif;
      font-weight: 700;
      background: linear-gradient(45deg, var(--primary), var(--secondary));
      -webkit-background-clip: text;
      background-clip: text;
      color: transparent;
      text-shadow: 0 0 10px rgba(0, 200, 255, 0.3);
      letter-spacing: 2px;
      position: relative;
      display: inline-block;
    }
    
    .loading-container h1::after {
      content: '';
      position: absolute;
      bottom: -10px;
      left: 0;
      width: 100%;
      height: 3px;
      background: linear-gradient(90deg, transparent, var(--primary), transparent);
      border-radius: 50%;
    }
    
    .loading-container p {
      margin-bottom: 2rem;
      font-weight: 300;
      line-height: 1.6;
      color: rgba(224, 224, 255, 0.8);
    }
    
    .progress-container {
      width: 100%;
      height: 8px;
      background-color: rgba(51, 51, 51, 0.5);
      border-radius: 10px;
      margin: 2rem auto;
      overflow: hidden;
      position: relative;
    }
    
    .progress-bar {
      height: 100%;
      background: linear-gradient(90deg, var(--primary), var(--secondary));
      border-radius: 10px;
      width: 0%;
      transition: width 0.3s ease-out;
      position: relative;
      box-shadow: 0 0 10px rgba(0, 200, 255, 0.5);
    }
    
    .progress-bar::after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(90deg, 
                  transparent, 
                  rgba(255, 255, 255, 0.4), 
                  transparent);
      animation: shine 2s infinite;
    }
    
    @keyframes shine {
      0% { transform: translateX(-100%); }
      100% { transform: translateX(100%); }
    }
    
    .percentage {
      font-size: 1.5rem;
      font-family: 'Orbitron', sans-serif;
      margin: 1rem 0;
      color: var(--primary);
      text-shadow: 0 0 10px rgba(0, 200, 255, 0.5);
    }
    
    .status-message {
      font-size: 0.9rem;
      color: rgba(224, 224, 255, 0.6);
      margin-top: 1rem;
      min-height: 20px;
    }
    
    .loading-features {
      display: flex;
      justify-content: space-around;
      flex-wrap: wrap;
      margin: 2rem 0;
    }
    
    .feature {
      flex: 1;
      min-width: 150px;
      margin: 0.5rem;
      padding: 1rem;
      background: rgba(0, 98, 255, 0.1);
      border-radius: 8px;
      border-left: 3px solid var(--primary);
      transition: all 0.3s ease;
    }
    
    .feature:hover {
      transform: translateY(-5px);
      background: rgba(0, 98, 255, 0.2);
      box-shadow: 0 5px 15px rgba(0, 98, 255, 0.2);
    }
    
    .feature-icon {
      font-size: 1.5rem;
      margin-bottom: 0.5rem;
      color: var(--primary);
    }
    
    .feature-title {
      font-size: 0.8rem;
      font-weight: 600;
      margin-bottom: 0.3rem;
    }
    
    .feature-desc {
      font-size: 0.7rem;
      color: rgba(224, 224, 255, 0.6);
    }
    
    .cyber-grid {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: 
        linear-gradient(rgba(0, 200, 255, 0.05) 1px, transparent 1px),
        linear-gradient(90deg, rgba(0, 200, 255, 0.05) 1px, transparent 1px);
      background-size: 30px 30px;
      z-index: -1;
      opacity: 0.5;
    }
    
    .binary-rain {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: -1;
      opacity: 0.1;
      pointer-events: none;
    }
    
    .binary-digit {
      position: absolute;
      color: var(--primary);
      font-family: 'Courier New', monospace;
      font-size: 14px;
      opacity: 0;
      animation: fall linear infinite;
    }
    
    @keyframes fall {
      0% { transform: translateY(-100px); opacity: 0; }
      10% { opacity: 1; }
      90% { opacity: 1; }
      100% { transform: translateY(100vh); opacity: 0; }
    }
    
    .logo {
      width: 80px;
      height: 80px;
      margin: 0 auto 1rem;
      background: radial-gradient(circle, var(--primary) 0%, transparent 70%);
      border-radius: 50%;
      display: flex;
      justify-content: center;
      align-items: center;
      position: relative;
      animation: pulse 2s infinite;
    }
    
    .logo-inner {
      width: 60px;
      height: 60px;
      background: var(--dark);
      border-radius: 50%;
      display: flex;
      justify-content: center;
      align-items: center;
      font-family: 'Orbitron', sans-serif;
      font-weight: bold;
      font-size: 1.5rem;
      color: var(--primary);
      box-shadow: 0 0 20px rgba(0, 200, 255, 0.5);
    }
    
    @keyframes pulse {
      0%, 100% { transform: scale(1); }
      50% { transform: scale(1.05); }
    }
    
    @media (max-width: 768px) {
      .loading-container {
        width: 90%;
        padding: 1.5rem;
      }
      
      .loading-container h1 {
        font-size: 2rem;
      }
      
      .feature {
        min-width: 120px;
        padding: 0.8rem;
      }
    }
  </style>
</head>
<body>
  <div class="cyber-grid"></div>
  <div class="binary-rain" id="binaryRain"></div>
  <div class="particles" id="particles"></div>
  
  <div class="loading-container">
    <div class="logo">
      <div class="logo-inner">HVD</div>
    </div>
    
    <h1><font color="blue">HACKSVIBEZ</span></h1> <h1><font color="red">DERIV</span></h1>
    <p>Your Premium Trading Platform with Advanced Analytics and Real-time Market Data</p>
    
    <div class="loading-features">
      <div class="feature">
        <div class="feature-icon">âš¡</div>
        <div class="feature-title">LIGHTNING FAST</div>
        <div class="feature-desc">Ultra-low latency execution</div>
      </div>
      <div class="feature">
        <div class="feature-icon">ðŸ”’</div>
        <div class="feature-title">SECURE</div>
        <div class="feature-desc">Bank-grade encryption</div>
      </div>
      <div class="feature">
        <div class="feature-icon">ðŸ“Š</div>
        <div class="feature-title">ANALYTICS</div>
        <div class="feature-desc">Advanced market insights</div>
      </div>
    </div>
    
    <p id="statusMessage">Initializing trading engine...</p>
    <div class="progress-container">
      <div class="progress-bar" id="progressBar"></div>
    </div>
    <div class="percentage" id="percentage">0%</div>
    <div class="status-message" id="detailedStatus"></div>
  </div>

  <script>
    // Particle effect
    const particlesContainer = document.getElementById('particles');
    const particleCount = 50;
    
    for (let i = 0; i < particleCount; i++) {
      const particle = document.createElement('div');
      particle.classList.add('particle');
      
      const size = Math.random() * 5 + 1;
      const posX = Math.random() * window.innerWidth;
      const posY = Math.random() * window.innerHeight;
      const delay = Math.random() * 5;
      const duration = Math.random() * 10 + 10;
      
      particle.style.width = `${size}px`;
      particle.style.height = `${size}px`;
      particle.style.left = `${posX}px`;
      particle.style.top = `${posY}px`;
      particle.style.opacity = Math.random() * 0.5 + 0.1;
      particle.style.animation = `float ${duration}s ease-in-out ${delay}s infinite`;
      
      document.getElementById('particles').appendChild(particle);
    }
    
    // Binary rain effect
    const binaryRain = document.getElementById('binaryRain');
    const binaryChars = ['0', '1', '0010', '0101', '1010', '1100'];
    
    function createBinaryDigit() {
      const digit = document.createElement('div');
      digit.classList.add('binary-digit');
      digit.textContent = binaryChars[Math.floor(Math.random() * binaryChars.length)];
      digit.style.left = `${Math.random() * 100}%`;
      digit.style.animationDuration = `${Math.random() * 5 + 3}s`;
      binaryRain.appendChild(digit);
      
      setTimeout(() => {
        digit.remove();
      }, 8000);
    }
    
    setInterval(createBinaryDigit, 100);
    
    // Progress bar animation
    let progress = 0;
    const progressBar = document.getElementById('progressBar');
    const percentage = document.getElementById('percentage');
    const statusMessage = document.getElementById('statusMessage');
    const detailedStatus = document.getElementById('detailedStatus');
    
    const statusMessages = [
      "Loading core modules...",
      "Establishing secure connection...",
      "Authenticating session...",
      "Syncing market data...",
      "Initializing trading algorithms...",
      "Optimizing performance...",
      "Finalizing setup..."
    ];
    
    const detailedMessages = [
      "âœ“ Memory allocation complete",
      "âœ“ Encryption protocols enabled",
      "âœ“ Market data feed connected",
      "âœ“ Order execution system ready",
      "âœ“ User interface initialized",
      "âœ“ Real-time analytics loaded"
    ];
    
    const interval = setInterval(() => {
      progress += 1;
      progressBar.style.width = `${progress}%`;
      percentage.textContent = `${progress}%`;
      
      // Update status messages
      if (progress % 15 === 0) {
        const randomStatus = statusMessages[Math.floor(Math.random() * statusMessages.length)];
        statusMessage.textContent = randomStatus;
      }
      
      // Update detailed status
      if (progress % 20 === 0) {
        const randomDetail = detailedMessages[Math.floor(Math.random() * detailedMessages.length)];
        detailedStatus.textContent = randomDetail;
        
        // Flash effect
        detailedStatus.style.opacity = 0;
        setTimeout(() => {
          detailedStatus.style.opacity = 1;
          detailedStatus.style.transition = 'opacity 0.3s';
        }, 50);
      }
      
      // Add some randomness to progress
      if (Math.random() > 0.7 && progress < 95) {
        progress += Math.random() * 2;
      }
      
      if (progress >= 100) {
        clearInterval(interval);
        statusMessage.textContent = "Ready! Redirecting to dashboard...";
        detailedStatus.textContent = "âœ“ All systems operational";
        
        // Add completion effects
        progressBar.style.background = `linear-gradient(90deg, var(--primary), #00ff88)`;
        percentage.style.color = '#00ff88';
        
        setTimeout(() => {
          window.location.href = 'backagain.htm';
        }, 1500);
      }
    }, 50);
    
    // 3D tilt effect
    const container = document.querySelector('.loading-container');
    
    container.addEventListener('mousemove', (e) => {
      const x = e.clientX - container.getBoundingClientRect().left;
      const y = e.clientY - container.getBoundingClientRect().top;
      
      const centerX = container.offsetWidth / 2;
      const centerY = container.offsetHeight / 2;
      
      const angleX = (y - centerY) / 20;
      const angleY = (centerX - x) / 20;
      
      container.style.transform = `perspective(1000px) rotateX(${angleX}deg) rotateY(${angleY}deg)`;
    });
    
    container.addEventListener('mouseleave', () => {
      container.style.transform = 'perspective(1000px) rotateX(0) rotateY(0)';
    });
  </script>
</body>
</html>
